# Copyright 2023 CS Group
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Check script variables
  assert:
    that:
      - rs_addon_location is defined
      - stream_name is defined

- name: Deploy RS add-on
  block:
    - name: Install java jre
      apt: 
        name: openjdk-17-jre-headless
        state: present
      become: true
      
    - name: Setting some facts
      set_fact:
        shell_jar_path: "/home/safescale/{{ shell_jar_url | urlsplit('path') | basename }}"
        rs_addon_name: "{{ rs_addon_location | basename | splitext | first }}" 
        rs_addon_zip: "{{ rs_addon_location | basename }}"
        rs_addon_url: "{{ rs_addon_location | urlsplit }}"

    - name: Check if scdf shell jar exists
      stat:
        path: "{{ shell_jar_path }}"
      register: shell_jar_file

    - name: Download scdf shell jar
      get_url:
        url: "{{ shell_jar_url }}"
        dest: "{{ shell_jar_path }}"
        mode: 0755
        checksum: "sha1:{{ shell_jar_sha1 }}"
      when:
        - "not shell_jar_file.stat.exists or shell_jar_file.stat.mode != 755 or shell_jar_file.stats.checksum != shell_jar_sha1"

    - name: Create remote tmp directory
      tempfile:
        state: directory
        suffix: _rs_addon
      register: remote_rs_addon_dir

    - name: Create local tmp directory
      delegate_to: localhost
      tempfile:
        state: directory
        suffix: _rs_addon
      register: local_rs_addon_dir

    - name: Download and unzip rs_addon
      delegate_to: localhost
      unarchive:
        src: "{{ rs_addon_location }}"
        dest: "{{ local_rs_addon_dir.path }}"
        remote_src: "{%- if rs_addon_url.scheme != '' -%}yes{%- else -%}no{%- endif -%}"

    - name: Send rs_addon executables to the gateway
      copy:
        src: "{{ item }}"
        dest: "{{ remote_rs_addon_dir.path }}"
        mode: 0644
      with_fileglob:
        - "{{ local_rs_addon_dir.path }}/{{ rs_addon_name }}_Executables/*.properties"

    - name: Read stream-definition file
      slurp:
        src: "{{ remote_rs_addon_dir.path }}/stream-definition.properties"
      register: stream_definitions_content

    - name: Read streams from definition field if using ICD 3.0
      block:
        - name: Warn that stream description and definition fields are deprecated
          debug:
            msg: "[WARNING] 'description' and 'definition' fields in the stream-definition.properties are deprecated."

        - name: Get all the streams definitions
          set_fact:
            stream_definitions: "{{ stream_definitions_content.content | b64decode | regex_search('definition ?= ?\"(.*)\"', '\\1') | first }}"          
      when: stream_definitions_content.content | b64decode is search(' *definition ?= ?\"(.*)\"')

    - name: Read streams definitions
      set_fact:
        stream_definitions: "{{ stream_definitions_content.content | b64decode }}"          
      when: stream_definitions_content.content | b64decode is not search(' *definition ?= ?\"(.*)\"')

    - name: Remove comments and split stream definition by lines
      set_fact:
        stream_definitions: "{{ (stream_definitions | regex_replace(' *#.*','')).splitlines() | select('match', '[^ ]+') }}"
  
    - name: Assert successful stream parse
      assert:
        that:
          stream_definitions | length > 0
        quiet: true

    - name: Read stream-parameters file
      slurp:
        src: "{{ remote_rs_addon_dir.path }}/stream-parameters.properties"
      register: stream_properties_content

    - name: Parse streams properties
      set_fact:
        stream_properties: "{{ (stream_properties_content.content | b64decode | regex_replace(' *#.*','')).splitlines() | select('match', '[^ ]') }}"

    - name: Template script to gw
      template:
        src: scdf_shell_script.sh.j2
        dest: "{{ remote_rs_addon_dir.path }}/scdf_shell_script.sh"

    - name: Check if additional_resources folder exists
      delegate_to: localhost
      stat:
        path: "{{ local_rs_addon_dir.path }}/{{ rs_addon_name }}_Executables/additional_resources"
      register: additional_resources_dir

    - name: Check if additional_resources folder contains yaml files
      delegate_to: localhost
      find:
        paths: "{{ additional_resources_dir.stat.path }}"
        patterns: "*.yaml,*.yml"
      register: additional_files
      when: additional_resources_dir.stat.exists

    - name: Deploy the additional resources into the cluster
      block:
        - name: Template and send additional resources to gateway
          template:
            src: "{{ item }}"
            dest: "{{ remote_rs_addon_dir.path }}/additional_resources/"
            mode: 0644
          with_fileglob:
            - "{{ additional_resources_dir.stat.path }}/*ml"
        - name: Apply the resources into the cluster
          shell: "kubectl apply --server-side --force-conflicts -f {{ remote_rs_addon_dir.path }}/additional_resources/"
          register: deploy_log
        - name: Print the deployed resources
          debug:
            msg: "{{ deploy_log.stdout_lines }}"
      when: additional_resources_dir.stat.exists and additional_resources_dir.stat.isdir and additional_files.matched > 0

    - name: Deploy executables with the scdf shell jar
      shell: |
        java -jar {{ shell_jar_path }} \
        --dataflow.uri=http://spring-cloud-dataflow-server.processing.svc.cluster.local:8080 \
        --dataflow.username={{ keycloak.realm.admin.username }} \
        --dataflow.password={{ keycloak.realm.admin.password }} \
        --spring.shell.commandFile={{ remote_rs_addon_dir.path }}/scdf_shell_script.sh
      register: deploy_log

    - name: Print deploy log
      debug:
        msg: "{{ deploy_log.stdout_lines }}"

  always:
    - name: Remove resources tmp dir
      file:
        path: "{{ remote_rs_addon_dir.path }}"
        state: absent
      when:
        - rs_addon_dir.path is defined
        - not debug

    - name: Warn about not deleted tmp folder
      debug:
        msg:
          - "DEBUG: the temporary folder containing the rs add-on has been kept for debugging purpose"
          - "{{ remote_rs_addon_dir.path }}"
          - "DO NOT FORGET TO DELETE IT WHEN YOU ARE DONE"
      when:
        - debug
