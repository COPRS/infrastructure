
apisix:
  # Enable or disable Apache APISIX itself
  # Set it to false and ingress-controller.enabled=true will deploy only ingress-controller
  enabled: true

  # Use Pod metadata.uid as the APISIX id.
  setIDFromPodUID: false

  customLuaSharedDicts: []
    # - name: foo
    #   size: 10k
    # - name: bar
    #   size: 1m

  image:
    repository: apache/apisix
    # Overrides the image tag whose default is the chart appVersion.
    tag: 2.10.0-alpine

  replicaCount: 1

  podAnnotations:
    config.linkerd.io/skip-outbound-ports: "2379"

  podSecurityContext: {}
    # fsGroup: 2000
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}
  # If true, it will sets the anti-affinity of the Pod.
  podAntiAffinity:
    enabled: true

nameOverride: ""
fullnameOverride: ""

gateway:
  type: NodePort
  # If you want to keep the client source IP, you can set this to Local.
  # ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  externalTrafficPolicy: Cluster
  # type: LoadBalancer
  # annotations:
  #   service.beta.kubernetes.io/aws-load-balancer-type: nlb
  externalIPs: []
  http:
    enabled: true
    servicePort: 80
    containerPort: 9080
    nodePort: 32080
  tls:
    enabled: true
    servicePort: 443
    containerPort: 9443
    nodePort: 32443
    existingCASecret: ""
    certCAFilename: ""
    http2:
      enabled: true
  stream:  # L4 proxy (TCP/UDP)
    enabled: false
    only: false
    tcp: []
    udp: []
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: apisix.local
        paths: []
    tls: []
  #  - secretName: apisix-tls
  #    hosts:
  #      - chart-example.local


admin:
  # Enable Admin API
  enabled: true
  # admin service type
  type: ClusterIP
  # loadBalancerIP: a.b.c.d
  # loadBalancerSourceRanges:
  #   - "143.231.0.0/16"
  externalIPs: []
  #
  port: 9180
  servicePort: 9180
  # Admin API support CORS response headers
  cors: true
  # Admin API credentials
  credentials:
    admin: edd1c9f034335f136f87ad84b625c8f1
    viewer: 4054f7cf07e344346cd3f287985e76a2

  allow:
    # The ip range for allowing access to Apache APISIX
    ipList:
      - 127.0.0.1/24


# APISIX plugins to be enabled
plugins:
  - api-breaker
  - authz-keycloak
  - basic-auth
  - batch-requests
  - consumer-restriction
  - cors
  - echo
  - fault-injection
  - grpc-transcode
  - hmac-auth
  - http-logger
  - ip-restriction
  - ua-restriction
  - jwt-auth
  - kafka-logger
  - key-auth
  - limit-conn
  - limit-count
  - limit-req
  - node-status
  - openid-connect
  - authz-casbin
  - prometheus
  - proxy-cache
  - proxy-mirror
  - proxy-rewrite
  - redirect
  - referer-restriction
  - request-id
  - request-validation
  - response-rewrite
  - serverless-post-function
  - serverless-pre-function
  - sls-logger
  - syslog
  - tcp-logger
  - udp-logger
  - uri-blocker
  - wolf-rbac
  - zipkin
  - traffic-split
  - gzip
  - real-ip
stream_plugins:
  - mqtt-proxy
  - ip-restriction
  - limit-conn

pluginAttrs: {}

# customPlugins allows you to mount your own HTTP plugins.
customPlugins:
  enabled: false

discovery:
  enabled: false
  registry:
      # Integration service discovery registry. E.g eureka\dns\nacos\consul_kv
      # reference:
      # https://apisix.apache.org/docs/apisix/discovery#configuration-for-eureka
      # https://apisix.apache.org/docs/apisix/discovery/dns#service-discovery-via-dns
      # https://apisix.apache.org/docs/apisix/discovery/consul_kv#configuration-for-consul-kv
      # https://apisix.apache.org/docs/apisix/discovery/nacos#configuration-for-nacos
      #
      # an eureka example:
      # eureka:
      #   host:
      #     - "http://${username}:${password}@${eureka_host1}:${eureka_port1}"
      #     - "http://${username}:${password}@${eureka_host2}:${eureka_port2}"
      #   prefix: "/eureka/"
      #   fetch_interval: 30
      #   weight: 100
      #   timeout:
      #     connect: 2000
      #     send: 2000
      #     read: 5000

# access log and error log configuration
logs:
  enableAccessLog: true
  accessLog: "/dev/stdout"
  accessLogFormat: '$remote_addr - $remote_user [$time_local] $http_host \"$request\" $status $body_bytes_sent $request_time \"$http_referer\" \"$http_user_agent\" $upstream_addr $upstream_status $upstream_response_time \"$upstream_scheme://$upstream_host$upstream_uri\"'
  accessLogFormatEscape: default
  errorLog: "/dev/stderr"
  errorLogLevel: "warn"

dns:
  resolvers:
    - 127.0.0.1
    - 172.20.0.10
    - 114.114.114.114
    - 223.5.5.5
    - 1.1.1.1
    - 8.8.8.8
  validity: 30
  timeout: 5


autoscaling:
  enabled: false

# service selectors do not match kustomize configuration
# we define the serviceMonitor with kustomization
# Observability configuration.
# ref: https://apisix.apache.org/docs/apisix/plugins/prometheus/
serviceMonitor:
  enabled: false
  # namespace where the serviceMonitor is deployed, by default, it is the same as the namespace of the apisix
  namespace: ""
  # interval at which metrics should be scraped
  interval: 15s
  # path of the metrics endpoint
  path: /apisix/prometheus/metrics
  # container port where the metrics are exposed
  containerPort: 9091
  # @param serviceMonitor.labels ServiceMonitor extra labels
  labels: {}
  # @param serviceMonitor.annotations ServiceMonitor annotations
  annotations: {}

# etcd configuration
# use the FQDN address or the IP of the etcd
etcd:
  # install etcd(v3) by default, set false if do not want to install etcd(v3) together
  enabled: true
  host:
    - http://etcd.host:2379  # host or ip e.g. http://172.20.128.89:2379
  prefix: "/apisix"
  timeout: 30

  # if etcd.enabled is true, set more values of bitnami/etcd helm chart
  auth:
    rbac:
      # No authentication by default
      enabled: false
      user: ""
      password: ""
    tls:
      enabled: false
      existingSecret: ""
      certFilename: ""
      certKeyFilename: ""
      verify: true
      sni: ""

  service:
    port: 2379

  replicaCount: 1

  persistence:
    enabled: true
    storageClass: ceph-block

  podAnnotations:
    config.linkerd.io/skip-inbound-ports: "2379"

dashboard:
  enabled: true
  # default values available at: https://github.com/apache/apisix-helm-chart/blob/master/charts/apisix-dashboard/values.yaml
  replicaCount: 1

  image:
    repository: apache/apisix-dashboard
    tag: 2.10.1-alpine

  authentication:
    secert: secert
    expireTime: 3600
    users:
      - username: admin
        password: admin

ingress-controller:
  enabled: true
  #Â default values available at https://github.com/apache/apisix-helm-chart/blob/master/charts/apisix-ingress-controller/values.yaml
  replicaCount: 1

  image:
    repository: apache/apisix-ingress-controller
    tag: "1.3.0"

  service:
    port: 80

  config:
    # the error log level, default is info, optional values are:
    # debug
    # info
    # warn
    # error
    # panic
    # fatal
    logLevel: "info"
    # the output file path of error log, default is stderr, when
    # the file path is "stderr" or "stdout", logs are marshalled
    # plainly, which is more readable for human; otherwise logs
    # are marshalled in JSON format, which can be parsed by
    # programs easily.
    logOutput: "stderr"
    # the HTTP Server listen address, default is ":8080"
    httpListen: ":8080"
    # enable profiling via web interfaces host:port/debug/pprof, default is true.
    enableProfiling: false
    # Kubernetes related configurations.
    kubernetes:
      # the Kubernetes configuration file path, default is "", so the in-cluster
      # configuration will be used.
      kubeconfig: ""
      # how long should apisix-ingress-controller re-synchronizes with Kubernetes,
      # default is 6h,
      resyncInterval: "6h"
      # namespace list that controller will watch for resources,
      # by default all namespaces (represented by "*") are watched.
      appNamespaces: ["*"]
      # the election id for the controller leader campaign,
      # only the leader will watch and delivery resource changes,
      # other instances (as candidates) stand by.
      electionId: "ingress-apisix-leader"
      # The class of an Ingress object is set using the field IngressClassName in
      # Kubernetes clusters version v1.18.0 or higher or the annotation
      # "kubernetes.io/ingress.class" (deprecated).
      ingressClass: "apisix"
      # the supported ingress api group version, can be "networking/v1beta1",
      # "networking/v1" (for Kubernetes version v1.19.0 or higher), and
      # "extensions/v1beta1", default is "networking/v1".
      ingressVersion: "networking/v1"
      # the supported apisixroute api group version, can be "apisix.apache.org/v1"
      # "apisix.apache.org/v2alpha1" or "apisix.apache.org/v2beta1"
      apisixRouteVersion: "apisix.apache.org/v2beta1"
    # APISIX related configurations.
    apisix:
      serviceName: apisix-admin
      serviceNamespace: infra
      servicePort: 9180
      adminKey: "edd1c9f034335f136f87ad84b625c8f1"

  resources: {}

  initContainer:
    image: busybox
    tag: 1.28

  autoscaling:
    enabled: false

  nodeSelector: {}
  tolerations: []


