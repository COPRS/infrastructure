- name: Generate or reuse app_vars
  delegate_to: localhost
  block:
    - name: Setting some facts
      set_fact:
        generated_app_vars_path: "{{ inventory_dir }}/artifacts/generated_app_vars.yaml"
        app_vars_path: "{{ inventory_dir }}/group_vars/gateway/app_vars.yaml"

    - name: Download app_vars from vault if specified
      when: vault is defined and vault.download_app_vars
      copy:
        content: "{{ lookup('community.hashi_vault.hashi_vault', vault.path + 'generated_app_vars', token=vault.token, url=vault.url) | to_nice_yaml(indent=2) }}"
        dest: "{{ generated_app_vars_path }}"

    - name: Check whether generated_app_vars.yaml file exists
      stat:
        path: "{{ generated_app_vars_path }}"
      register: generated_app_vars

    - name: Generate app_vars
      template:
        src: "{{ app_vars_path }}"
        dest: "{{ generated_app_vars_path }}"
        mode: 0600
      when: not generated_app_vars.stat.exists

    - name: Load previously generated app_vars
      include_vars: "{{ generated_app_vars_path }}"

- name: Send generated app_vars to vault
  block:
    - shell: "cat {{ generated_app_vars_path }}"
      register: cat_result
    - set_fact:
        cat_content: "{{ cat_result.stdout | from_yaml | to_json }}"
    - copy:
        content: '{"data": {{ cat_content }} }'
        dest: "{{ inventory_dir }}/artifacts/generated_app_vars.json"
    - uri:
        url: "{{ vault.url }}/v1/{{ vault.path }}generated_app_vars"
        method: POST
        headers:
          X-Vault-Token: "{{ vault.token }}"
        body_format: json
        src: "{{ inventory_dir }}/artifacts/generated_app_vars.json"
    - ansible.builtin.file:
        path: "{{ inventory_dir }}/artifacts/generated_app_vars.json"
        state: absent
  delegate_to: localhost
  when: vault is defined and not vault.download_app_vars
    

- name: Browse each package
  include_tasks: install_package.yaml
  vars:
    package_name: "{{ package_path | basename }}"
  loop: "{{ package_paths }}"
  loop_control:
    loop_var: package_path
  when: package is undefined or package == package_name
    
- meta: end_play
