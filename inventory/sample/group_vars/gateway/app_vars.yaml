rs_domain_name: DOMAIN_NAME

common:
  s3:
    endpoint: S3_ENDPOINT
    region: S3_REGION
    secret_key: S3_SECRET_KEY
    access_key: S3_ACCESS_KEY

apisix:
  oidc_client_secret: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"
  api_credentials:
    admin: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"
    viewer: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"

linkerd:
  ca:
    crt: |
      -----BEGIN CERTIFICATE-----
      YOUR MTLS ROOT CERTIFICATE HERE
      Read the following documentationto generate your own
      https://linkerd.io/2.11/tasks/automatically-rotating-control-plane-tls-credentials/#save-the-signing-key-pair-as-a-secret
      -----END CERTIFICATE-----
    key: |
      -----BEGIN EC PRIVATE KEY-----
      YOUR MTLS ROOT CERTIFICATE KEY HERE
      Read the following documentationto generate your own
      https://linkerd.io/2.11/tasks/automatically-rotating-control-plane-tls-credentials/#save-the-signing-key-pair-as-a-secret
      -----END EC PRIVATE KEY-----
  webhook:
    crt: |
      -----BEGIN CERTIFICATE-----
      YOUR WEBHOOK CERTIFICATE HERE
      Read the following documentationto generate your own
      https://linkerd.io/2.11/tasks/automatically-rotating-webhook-tls-credentials/#save-the-signing-key-pair-as-a-secret
      -----END CERTIFICATE-----
    key: |
      -----BEGIN EC PRIVATE KEY-----
      YOUR WEBHOOK CERTIFICATE KEY HERE
      Read the following documentationto generate your own
      https://linkerd.io/2.11/tasks/automatically-rotating-webhook-tls-credentials/#save-the-signing-key-pair-as-a-secret
      -----END EC PRIVATE KEY-----

  oidc_client_secret: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"

prometheus:
  oidc_client_secret: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"

thanos:
  s3:
    bucket: THANOS_BUCKET
    endpoint: "{{ common.s3.endpoint }}"
    region: "{{ common.s3.region }}"
    access_key: "{{ common.s3.access_key }}"
    secret_key: "{{ common.s3.secret_key }}"

grafana:
  oidc_client_secret: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"

elasticsearch_security:
  operator_password_hash: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"
  kibana_oidc_client_secret: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"
  repository:
    s3:
      bucket: ES_SECURITY_REPOSITORY_BUCKET
      endpoint: "{{ common.s3.endpoint }}"
      region: "{{ common.s3.region }}"
      access_key: "{{ common.s3.access_key }}"
      secret_key: "{{ common.s3.secret_key }}"

elasticsearch_processing:
  operator_password_hash: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"
  kibana_oidc_client_secret: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"
  repository:
    s3:
      bucket: ES_PROCESSING_REPOSITORY_BUCKET
      endpoint: "{{ common.s3.endpoint }}"
      region: "{{ common.s3.region }}"
      access_key: "{{ common.s3.access_key }}"
      secret_key: "{{ common.s3.secret_key }}"

keycloak:
  superadmin:
    username: superadmin
    password: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"
  database:
    password: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"

mongodb:
  database: graylog
  password: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"
  username: graylog

openldap:
  admin_user_password: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"
  config_user_password: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"
  readonly_user_password: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"

postgresql:
  replication:
    user: replication_user
    password: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"

graylog:
  oidc_client_secret: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"

finops_object_storage_exporter:
  s3:
    endpoint: "{{ common.s3.endpoint }}"
    region: "{{ common.s3.region }}"
    access_key: "{{ common.s3.access_key }}"
    secret_key: "{{ common.s3.secret_key }}"

scdf:
  database:
    password: "{{ lookup('password', '/dev/null length=60 chars=ascii_letters') }}"

stash:
  license: |
    -----BEGIN CERTIFICATE-----
    Get a license here: https://license-issuer.appscode.com/?p=stash-community
    -----END CERTIFICATE-----
    
rclone:
  source:
    s3:
      endpoint: "{{ common.s3.endpoint }}"
      region: "{{ common.s3.region }}"
      access_key: "{{ common.s3.access_key }}"
      secret_key: "{{ common.s3.secret_key }}"
  destination:
    s3:
      endpoint: "{{ common.s3.endpoint }}"
      region: "{{ common.s3.region }}"
      access_key: "{{ common.s3.access_key }}"
      secret_key: "{{ common.s3.secret_key }}"

cs_registry:
  username: HELM_CS_USERNAME
  password: HELM_CS_PASSWORD
