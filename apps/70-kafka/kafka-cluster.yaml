apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: kafka-cluster
spec:
  kafka:
    replicas: 3
    version: 3.4.0
    template:
      pod:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                  - key: "node-role.kubernetes.io/infra"
                    operator: Exists
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: strimzi.io/name
                  operator: In
                  values:
                  - kafka-cluster-{{ app_name }}
              topologyKey: kubernetes.io/hostname
    logging:
      type: inline
      loggers:
        kafka.root.logger.level: "WARN"
    resources:
      limits:
        cpu: 1
        memory: 4Gi
      requests:
        cpu: 200m
        memory: 2Gi
    readinessProbe:
      initialDelaySeconds: 30
      timeoutSeconds: 5
    livenessProbe:
      initialDelaySeconds: 30
      timeoutSeconds: 5
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
        configuration:
          useServiceDnsDomain: true
    config:
      acks: all  
      min.insync.replicas: 1
      unclean.leader.election.enable: false
      num.network.threads: 3
      num.io.threads: 8
      socket.send.buffer.bytes: 102400
      socket.receive.buffer.bytes: 102400
      socket.request.max.bytes: 104857600
      num.partitions: 1
      num.recovery.threads.per.data.dir: 1
      log.retention.hours: 168
      log.segment.bytes: 1073741824
      log.retention.check.interval.ms: 300000
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
      group.initial.rebalance.delay.ms: 0
      default.replication.factor: 1
      delete.topic.enable: true
      auto.create.topics.enable: false
    storage:
      type: persistent-claim
      size: 200Gi
      class: "ceph-block"
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: kafka-metrics-config.yml
  zookeeper:
    replicas: 3
    # uses version: 3.5.9 for kafka 2.8.1
    template:
      pod:
        metadata:
          annotations:
            config.linkerd.io/skip-inbound-ports: 2888,3888
            config.linkerd.io/skip-outbound-ports: 2888,3888
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: "node-role.kubernetes.io/infra"
                  operator: Exists
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: strimzi.io/name
                  operator: In
                  values:
                  - kafka-cluster
              topologyKey: kubernetes.io/hostname
    logging:
      type: inline
      loggers:
        zookeeper.root.logger: "WARN"
    resources:
      requests:
        cpu: 100m
        memory: 750Mi
      limits:
        cpu: 200m
        memory: 1500Mi
    storage:
      type: persistent-claim
      size: 50Gi
      class: "ceph-block"
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: zookeeper-metrics-config.yml
  kafkaExporter:
    groupRegex: ".*"
    topicRegex: ".*"
    logging: warn
    enableSaramaLogging: false
    readinessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    livenessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    template:
      pod:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: "node-role.kubernetes.io/infra"
                  operator: Exists
    resources:
      requests:
        cpu: 40m
        memory: 32Mi
      limits:
        cpu: 200m
        memory: 128Mi
  entityOperator:
    template:
      pod:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: "node-role.kubernetes.io/infra"
                  operator: Exists
    topicOperator:
      watchedNamespace: logging
      reconciliationIntervalSeconds: 300
      resources:
        requests:
          cpu: 50m
          memory: 200Mi
        limits:
          cpu: 200m
          memory: 400Mi
    userOperator:
      resources:
        requests:
          cpu: 50m
          memory: 200Mi
        limits:
          cpu: 200m
          memory: 400Mi
