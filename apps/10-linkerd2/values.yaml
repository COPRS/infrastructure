## default values.yaml file is available at https://github.com/linkerd/linkerd2/tree/main/charts/linkerd-control-plane/values.yaml

## a HA values sample file is available at https://github.com/linkerd/linkerd2/tree/main/charts/linkerd-control-plane/values-ha.yaml

# -- Log level for the control plane components
controllerLogLevel: info
# -- Log format for the control plane components
controllerLogFormat: plain
# -- enables control plane tracing
controlPlaneTracing: false
# -- Control plane namespace
# namespace: linkerd
# -- enables the use of EndpointSlice informers for the destination service;
# enableEndpointSlices should be set to true only if EndpointSlice K8s feature
# gate is on
enableEndpointSlices: true
# -- enabling this omits the NET_ADMIN capability in the PSP
# and the proxy-init container when injecting the proxy;
# requires the linkerd-cni plugin to already be installed
cniEnabled: true
# -- Kubernetes priorityClassName for the Linkerd Pods
priorityClassName: ""

enablePodAntiAffinity: true

# policy controller configuration
policyController:
  # image -- Docker image for the policy controller
  image:
    # -- Docker image for the proxy
    name: cr.l5d.io/linkerd/policy-controller
    # -- Pull policy for the proxy container Docker image
    # @default -- imagePullPolicy
    pullPolicy: ""
    # -- Tag for the proxy container Docker image
    # @default -- linkerdVersion
    version: ""

  # -- The default allow policy to use when no `Server` selects a pod.  One of: "all-authenticated",
  # "all-unauthenticated", "cluster-authenticated", "cluster-unauthenticated", "deny"
  # @default -- "all-unauthenticated"
  defaultAllowPolicy: "all-unauthenticated"

  # -- Log level for the policy controller
  logLevel: linkerd=info,warn

  # -- policy controller resource requests & limits
  # @default -- destinationResources
  resources:
    cpu:
      # -- Maximum amount of CPU units that the policy controller can use
      limit: ""
      # -- Amount of CPU units that the policy controller requests
      request: ""
    memory:
      # -- Maximum amount of memory that the policy controller can use
      limit: ""
      # -- Maximum amount of memory that the policy controller requests
      request: ""
    ephemeral-storage:
      # -- Maximum amount of ephemeral storage that the policy controller can use
      limit: ""
      # -- Amount of ephemeral storage that the policy controller requests
      request: ""

# proxy configuration
proxy:
  # -- Enable service profiles for non-Kubernetes services
  enableExternalProfiles: false
  # -- Maximum time allowed for the proxy to establish an outbound TCP
  # connection
  outboundConnectTimeout: 1000ms
  # -- Maximum time allowed for the proxy to establish an inbound TCP
  # connection
  inboundConnectTimeout: 100ms
  image:
    # -- Docker image for the proxy
    name: cr.l5d.io/linkerd/proxy
    # -- Pull policy for the proxy container Docker image
    # @default -- imagePullPolicy
    pullPolicy: ""
    # -- Tag for the proxy container Docker image
    # @default -- linkerdVersion
    version: ""
  # -- Log level for the proxy
  logLevel: warn,linkerd=info
  # -- Log format (`plain` or `json`) for the proxy
  logFormat: plain
  ports:
    # -- Admin port for the proxy container
    admin: 4191
    # -- Control port for the proxy container
    control: 4190
    # -- Inbound port for the proxy container
    inbound: 4143
    # -- Outbound port for the proxy container
    outbound: 4140
  # -- The `cpu.limit` and `cores` should be kept in sync. The value of `cores`
  # must be an integer and should typically be set by rounding up from the
  # limit. E.g. if cpu.limit is '1500m', cores should be 2.
  cores: 0
  resources:
    cpu:
      limit: ""
      request: 100m
    memory:
      limit: 250Mi
      request: 20Mi
    ephemeral-storage:
      # -- Maximum amount of ephemeral storage that the proxy can use
      limit: ""
      # -- Amount of ephemeral storage that the proxy requests
      request: ""
  # -- User id under which the proxy runs
  uid: 2102
  # -- If set the proxy sidecar will stay alive for at
  # least the given period before receiving SIGTERM signal from Kubernetes but
  # no longer than pod's `terminationGracePeriodSeconds`. See [Lifecycle
  # hooks](https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks)
  # for more info on container lifecycle hooks.
  waitBeforeExitSeconds: 0
  #  -- If set, the application container will not start until the proxy is
  # ready
  await: true
  requireIdentityOnInboundPorts: ""
  # -- Default set of opaque ports
  # - SMTP (25,587) server-first
  # - MYSQL (3306) server-first
  # - Galera (4444) server-first
  # - PostgreSQL (5432) server-first
  # - Redis (6379) server-first
  # - ElasticSearch (9300) server-first
  # - Memcached (11211) clients do not issue any preamble, which breaks detection
  opaquePorts: "25,587,3306,4444,5432,6379,9300,11211"

  # -- disable mtls
  # disableIdentity: true
  # disableTap: true

# -- Allow proxies to perform transparent HTTP/2 upgrading
enableH2Upgrade: true

# -- Add a PSP resource and bind it to the control plane ServiceAccounts. Note
# PSP has been deprecated since k8s v1.21
enablePSP: false

# -- Failure policy for the proxy injector
webhookFailurePolicy: Fail

# controllerImage -- Docker image for the destination and identity components
controllerImage: cr.l5d.io/linkerd/controller
# -- Number of replicas for each control plane pod
controllerReplicas: 3
# -- User ID for the control plane components
controllerUID: 2103

controllerResources: &controller_resources
  cpu: &controller_resources_cpu
    limit: ""
    request: 100m
  memory:
    limit: 250Mi
    request: 50Mi

# destination configuration
# set resources for the sp-validator and its linkerd proxy respectively
# see proxy.resources for details.
# destinationResources -- CPU, Memory and Ephemeral Storage resources required by destination (see `proxy.resources` for sub-fields)
destinationResources: *controller_resources

# debug configuration
debugContainer:
  image:
    # -- Docker image for the debug container
    name: cr.l5d.io/linkerd/debug
    # -- Pull policy for the debug container Docker image
    # @default -- imagePullPolicy
    pullPolicy: ""
    # -- Tag for the debug container Docker image
    # @default -- linkerdVersion
    version: ""

identity:
  # -- If the linkerd-identity-trust-roots ConfigMap has already been created
  externalCA: false

  # -- Use [Service Account token Volume projection](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection) for pod validation instead of the default token
  serviceAccountTokenProjection: true
  issuer:
    scheme: linkerd.io/tls

    # -- Amount of time to allow for clock skew within a Linkerd cluster
    clockSkewAllowance: 20s

    # -- Amount of time for which the Identity issuer should certify identity
    issuanceLifetime: 24h0m0s

    # -- Which scheme is used for the identity issuer secret format
    tls:
      # -- Issuer certificate (ECDSA). It must be provided during install.
      crtPEM: |
        -----BEGIN CERTIFICATE-----
        MIIBsjCCAVmgAwIBAgIRANZrK8gXpjuidAaDTaxu7QowCgYIKoZIzj0EAwIwJTEj
        MCEGA1UEAxMacm9vdC5saW5rZXJkLmNsdXN0ZXIubG9jYWwwHhcNMjExMjIxMTQz
        NTA4WhcNMjIxMjIxMTQzNTA4WjApMScwJQYDVQQDEx5pZGVudGl0eS5saW5rZXJk
        LmNsdXN0ZXIubG9jYWwwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQj9tSX+mNb
        JkVXB9GqtHHIlWZ38/NZClcU3SCLikEfR13AJN+2e5hsElpsZg4XRx5WBtiiPaDT
        xbCx0LQMHSo5o2YwZDAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIB
        ADAdBgNVHQ4EFgQUSv5qMvGM+csviYjHCq/dkfLzWPAwHwYDVR0jBBgwFoAUymX5
        MhK18Lwfjx+YpyO4vmAFn3YwCgYIKoZIzj0EAwIDRwAwRAIgAb5eEyjXEThKG1Bm
        hHkc83mQ+qGHC7jaxO6+JjBFI1kCIEZ4smvTDJ1QEPX3gmUzlF0K9zHxpi4rOzdh
        SNAquBII
        -----END CERTIFICATE-----

      # -- Key for the issuer certificate (ECDSA). It must be provided during
      # install
      keyPEM: |
        -----BEGIN EC PRIVATE KEY-----
        MHcCAQEEIO7iBYvSsFRc2pW7mQr3dL2f/JHfEZL7R0JSAiJMXyg2oAoGCCqGSM49
        AwEHoUQDQgAEI/bUl/pjWyZFVwfRqrRxyJVmd/PzWQpXFN0gi4pBH0ddwCTftnuY
        bBJabGYOF0ceVgbYoj2g08WwsdC0DB0qOQ==
        -----END EC PRIVATE KEY-----

# CA
identityTrustAnchorsPEM: |
  -----BEGIN CERTIFICATE-----
  MIIBjTCCATOgAwIBAgIQID+7BrwUwqhtgL2E59QxtDAKBggqhkjOPQQDAjAlMSMw
  IQYDVQQDExpyb290LmxpbmtlcmQuY2x1c3Rlci5sb2NhbDAeFw0yMTEyMjExNDM0
  MjFaFw0zMTEyMTkxNDM0MjFaMCUxIzAhBgNVBAMTGnJvb3QubGlua2VyZC5jbHVz
  dGVyLmxvY2FsMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEC8Eb4sXqBah/Ttc3
  EmIG40GJmnk8TcsIRUA/7eD05yxlW4xE181CTSadEayNnO2I10ns3JAvNSsIKfj9
  fdXijKNFMEMwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQEwHQYD
  VR0OBBYEFMpl+TIStfC8H48fmKcjuL5gBZ92MAoGCCqGSM49BAMCA0gAMEUCIQDs
  0j0ENuA2auFbQR/f5wPv6dLnC7id9po5lOokCMus4gIgHilj83Xs/RrJfK8KLene
  4+2ige7C6SSb+gDnTMnAXrc=
  -----END CERTIFICATE-----

# -|- CPU, Memory and Ephemeral Storage resources required by the identity controller (see `proxy.resources` for sub-fields)
identityResources:
  cpu: *controller_resources_cpu
  memory:
    limit: 250Mi
    request: 10Mi
# -|- CPU, Memory and Ephemeral Storage resources required by proxy injected into identity pod (see `proxy.resources` for sub-fields)
#identityProxyResources:

# heartbeat configuration
# disableHeartBeat -- Set to true to not start the heartbeat cronjob
disableHeartBeat: false
heartbeatResources: *controller_resources
# -- Config for the heartbeat cronjob
# heartbeatSchedule: "0 0 * * *"

# proxy injector configuration
proxyInjector:
  # -- Do not create a secret resource for the profileValidator webhook. If this is set to `true`, the value `proxyInjector.caBundle` must be set (see below)
  externalSecret: false

  # -- Namespace selector used by admission webhook. If not set defaults to all
  # namespaces without the annotation
  # config.linkerd.io/admission-webhooks=disabled
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled

  # -- Certificate for the proxy injector. If not provided then Helm will generate one.
  crtPEM: |

  # -- Certificate key for the proxy injector. If not provided then Helm will generate one.
  keyPEM: |

  # -- Bundle of CA certificates for proxy injector. If not provided then Helm will use the certificate generated  for `proxyInjector.crtPEM`. If `proxyInjector.externalSecret` is set to true, this value must be set, as no certificate will be generated.
  caBundle: |

# -|- CPU, Memory and Ephemeral Storage resources required by the proxy injector (see
#`proxy.resources` for sub-fields)
proxyInjectorResources: *controller_resources
#-|- CPU, Memory and Ephemeral Storage resources required by proxy injected into the proxy injector
#pod (see `proxy.resources` for sub-fields)
#proxyInjectorProxyResources:

# service profile validator configuration
profileValidator:
  # -- Do not create a secret resource for the profileValidator webhook. If this is set to `true`, the value `profileValidator.caBundle` must be set (see below).
  externalSecret: false

  # -- Namespace selector used by admission webhook
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled

  # -- Certificate for the service profile validator. If not provided then Helm
  # will generate one.
  crtPEM: |

  # -- Certificate key for the service profile validator. If not provided then
  # Helm will generate one.
  keyPEM: |

  # -- Bundle of CA certificates for service profile validator. If not provided
  # then Helm will use the certificate generated  for `profileValidator.crtPEM`.
  # If `profileValidator.externalSecret` is set to true, this value must be set,
  # as no certificate will be generated.
  caBundle: |

# policy validator configuration
policyValidator:
  # -- Do not create a secret resource for the policyValidator webhook. If this is set to `true`, the value `policyValidator.caBundle` must be set (see below).
  externalSecret: false

  # -- Namespace selector used by admission webhook
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled

  # -- Certificate for the policy validator. If not provided then Helm
  # will generate one.
  crtPEM: |

  # -- Certificate key for the policy validator. If not provided then
  # Helm will generate one.
  keyPEM: |

  # -- Bundle of CA certificates for policy validator. If not provided
  # then Helm will use the certificate generated  for `policyValidator.crtPEM`.
  # If `policyValidator.externalSecret` is set to true, this value must be set,
  # as no certificate will be generated.
  caBundle: |

# -|- CPU, Memory and Ephemeral Storage resources required by the SP validator (see
#`proxy.resources` for sub-fields)
spValidatorResources: *controller_resources

# If the namespace is controlled by an external tool or can't be installed with Helm
# you can disable its installation. In this case:
# - The namespace created by the external tool must match the namespace value above
# - The external tool needs to create the namespace with the label:
#     config.linkerd.io/admission-webhooks: disabled

# installNamespace -- Set to false when installing Linkerd in a custom namespace. See the
# [Linkerd documentation](https://linkerd.io/2/tasks/install-helm#customizing-the-namespace) for more information.
installNamespace: true

# -- NodeSelector section, See the [K8S
# documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector)
# for more information
nodeSelector:
  kubernetes.io/os: linux
